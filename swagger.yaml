swagger: "2.0"
info:
  description: |
    The Arsa API is orgnaized around the REST methodology. It uses resource-oriented URLs and common HTTP response codes to indicate API errors.

    All requests must be authenticated via OAuth2. All API responses return JSON.
  version: "0.0.1"
  title: "Arsa"
  termsOfService: "https://arsa.io/terms/"
  contact:
    email: "apiteam@arsa.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.arsa.io"
basePath: "/v1"
tags:
- name: "pools"
  description: |
    A data pool is a collection of data files with the same taxonomy. It securely stores your data in a compressed and queryable format to allow workflows to access the data inside. When you create a data pool, you must define a taxonomy. Any data file sent to a data pool must match that taxonomy. Every file sent to a data pool gets appended with a "file_id" and "timestamp" attribute.

    The data inside of data pools is immutable and can be accessed via SQL at any time through a unique data pool endpoint. Arsa optimizes the data pools to allow for special SQL functions such as "ranking" to be performed over a data pool so you can gather the most recent iterations of your data. Arsa charges for the amount of data scanned for each query.

    Data files can be uploaded to Arsa through provider integrations. When a data pool is created, provider integrations can be added to enable access to upload data files. Data files can be uploaded via HTTPS, S3, or SFTP providers. A data pool can also be shared as a provider to enable access from third party users.
- name: "files"
  description: "Data files that are uploaded to a data pool."
- name: "transforms"
  description: |
    Transformations are processes that can be executed against a incoming dataset and return a new transformed dataset. A transformation process can be built as either a Docker image or a Apache Spark script. In each case, easy integration points are provided to read and write data in and out of your transformation. This allows you to focus on the application logic and not worry about data integration.

    A transformation must adhere to a defined input and output taxonomy. Arsa validates that the data getting sent in and the data returned match the taxonomy defined in the transformation.

    When creating a transformation, a user can specify how many resources the transformation can consume. This will effect the time it takes to complete the transformation. Arsa charges by the hour for each execution of a transformation based upon the resources set. A user can set the number of vCPUs and memory a transformation has access to.
- name: "workflows"
  description: |
    A workflow in Arsa is a DAG (Direct Acyclic Graph) of transformations. It is defined as a state machine that tells Arsa how to process the DAG. A workflow can be defined via a Arsa Workflow YAML and uploaded to the platform via the Arsa CLI.

    A workflow must be tied to a source data pool. This tells the workflow where to begin to read the data.  It can query from multiple data pools throughout the workflow, but must read from at least one parent data pool. A workflow can accept input parameters at runtime and can be schedule to repeat at time intervals or when a new data file is delivered on the source data pool.
- name: "interfaces"
  description: |
    An interface provides read or write access to a data pool for an individual or system. Data pool owners can specify who or what they want to share access with by creating an interface associated to a data pool.

    Each interface must conform to a supported access operation. The currently supported interfaces are: S3, HTTP, SFTP, or JDBC. Once a interface is created, Arsa will supply the credentials needed to access the data pool.
- name: "jobs"
  description: "Workflow executions."
schemes:
- "https"
paths:
  /pools:
    get:
      tags:
        - "pools"
      summary: "List the available data pools"
      description: ""
      operationId: "listPools"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pool"
        405:
          description: "Invalid input"
      security:
      - api_key:
        - "read:pools"
    post:
      tags:
        - "pools"
      summary: "Create a new data pool"
      description: ""
      operationId: "createPool"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pool object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Pool"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pool"
        405:
          description: "Validation exception"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /pools/{poolId}:
    get:
      tags:
        - "pools"
      summary: "Find pool by ID"
      description: "Returns a single pool"
      operationId: "getPoolById"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pool"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
    delete:
      tags:
        - "pools"
      summary: "Delete pool by ID"
      description: "Deletes a single pool"
      operationId: "deletePoolById"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /transforms:
    get:
      tags:
        - "transforms"
      summary: "List the available transforms"
      description: ""
      operationId: "listTransforms"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transform"
        405:
          description: "Invalid input"
      security:
      - api_key:
        - "read:transforms"
    post:
      tags:
        - "transforms"
      summary: "Create a new transform"
      description: ""
      externalDocs:
        description: "Find more info here"
        url: "https://swagger.io"
      operationId: "createTransform"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Transform object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Transform"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transform"
        405:
          description: "Validation exception"
      security:
        - api_key:
          - "write:transforms"
          - "read:transforms"

  /transforms/{transformId}:
    get:
      tags:
        - "transforms"
      summary: "Find transform by ID"
      description: "Returns a single transform"
      operationId: "getTransformById"
      produces:
      - "application/json"
      parameters:
      - name: "transformId"
        in: "path"
        description: "ID of transform to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transform"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Transform not found"
      security:
        - api_key:
          - "write:transforms"
          - "read:transforms"
    put:
      tags:
        - "transforms"
      summary: "Update transform by ID"
      description: "updates a single transform"
      operationId: "updateTransformById"
      produces:
      - "application/json"
      parameters:
      - name: "transformId"
        in: "path"
        description: "ID of transform to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Transform object that needs to be updated."
        required: true
        schema:
          $ref: "#/definitions/Transform"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transform"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Transform not found"
      security:
        - api_key:
          - "write:transforms"
          - "read:transforms"
    delete:
      tags:
        - "transforms"
      summary: "Delete transform by ID"
      description: "Deletes a single transform"
      operationId: "deleteTransformById"
      parameters:
      - name: "transformId"
        in: "path"
        description: "ID of transform to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Transform not found"
      security:
        - api_key:
          - "write:transforms"
          - "read:transforms"

  /pools/{poolId}/workflows:
    get:
      tags:
        - "workflows"
      summary: "Find workflows by pool ID"
      description: "Returns a list of available workflows"
      operationId: "getWorkflowsByPoolById"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
    post:
      tags:
        - "workflows"
      summary: "Create a new workflow"
      description: ""
      operationId: "createWorkflow"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Workflow object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Workflow"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
        405:
          description: "Validation exception"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /pools/{poolId}/workflows/{workflowId}:
    get:
      tags:
        - "workflows"
      summary: "Find workflows by pool ID"
      description: "Returns a list of available workflows"
      operationId: "getWorkflowById"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowId"
        in: "path"
        description: "ID of workflow"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pool"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
    put:
      tags:
        - "workflows"
      summary: "Update a workflow"
      description: ""
      operationId: "updateWorkflowById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowId"
        in: "path"
        description: "ID of workflow"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Workflow object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Workflow"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
        405:
          description: "Validation exception"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
    delete:
      tags:
        - "workflows"
      summary: "Delete a workflow"
      description: ""
      operationId: "deleteWorkflowById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowId"
        in: "path"
        description: "ID of workflow"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Invalid ID"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /pools/{poolId}/interfaces:
    get:
      tags:
        - "interfaces"
      summary: "Find interfaces by pool ID"
      description: "Returns a list of available interfaces"
      operationId: "listInterfacesByPoolById"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Interface"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
    post:
      tags:
        - "interfaces"
      summary: "Create a new interface"
      description: ""
      operationId: "createInterface"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Interface object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Interface"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Interface"
        405:
          description: "Validation exception"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /pools/{poolId}/files:
    get:
      tags:
        - "files"
      summary: "Find files by pool ID"
      description: "Returns a list of available files per pool"
      operationId: "getFilesByPoolById"
      produces:
      - "application/json"
      parameters:
      - name: "poolId"
        in: "path"
        description: "ID of pool to filter by"
        required: true
        type: "integer"
        format: "int64"
      - name: "providerId"
        in: "query"
        description: "ID of provider to filter by"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/File"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
      security:
        - api_key:
          - "write:pools"
          - "read:pools"
  /jobs:
    get:
      tags:
        - "jobs"
      summary: "List the available jobs"
      description: ""
      operationId: "listJobs"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
        405:
          description: "Invalid input"
      security:
      - api_key:
        - "read:jobs"
  /jobs/{jobId}:
    get:
      tags:
        - "jobs"
      summary: "Find job by ID"
      description: "Returns a single job"
      operationId: "getJobById"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "ID of job to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Job not found"
      security:
        - api_key:
          - "read:jobs"

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  Pool:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
      accountId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      createdAt:
        type: "string"
        format: "date-time"
        readOnly: true
      taxonomy:
        $ref: "#/definitions/Taxonomy"
      window:
        $ref: "#/definitions/Window"
  Window:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      access:
        type: "string"
        enum:
        - "read"
        - "write"
        - "readwrite"
      uri:
        type: "string"
  Taxonomy:
    type: "object"
    properties:
      format:
        type: "string"
        enum:
        - "csv"
        - "json"
        - "avro"
      fields:
        type: "array"
        items:
          $ref: "#/definitions/Field"
  Field:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
        enum:
          - "int"
          - "float"
          - "text"
  Transform:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      createdAt:
        type: "string"
        format: "date-time"
        readOnly: true
      name:
        type: "string"
      inTaxonomy:
        $ref: "#/definitions/Taxonomy"
      outTaxonomy:
        $ref: "#/definitions/Taxonomy"
      engine:
        $ref: "#/definitions/Engine"
    required:
      - name
      - inTaxonomy
      - outTaxonomy
      - engine

  Engine:
    type: "object"
    properties:
      vcpus:
        type: "integer"
        format: "int32"
      memory:
        type: "integer"
        format: "int32"
      engineType:
          type: string
          enum:
            - "docker"
            - "spark"
      engineConfig:
        type: "object"

  Job:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      workflowId:
        type: "integer"
        format: "int64"
      startedAt:
        type: "string"
        format: "date-time"
        readOnly: true
      endedAt:
        type: "string"
        format: "date-time"
        readOnly: true
      state:
        type: "string"
        enum:
          - waiting
          - running
          - finished
          - error
      steps:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            reportURL:
              type: "string"
            state:
              type: "string"
              enum:
                - waiting
                - running
                - finished
                - error
            winodw:
              $ref: '#/definitions/Window'
  File:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      providerId:
        type: "integer"
        format: "int64"
        readOnly: true
      poolId:
        type: "integer"
        format: "int64"
        readOnly: true
      receivedAt:
        type: "string"
        format: "date-time"
        readOnly: true
      filename:
        type: "string"

  Workflow:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      createdAt:
        type: "string"
        format: "date-time"
        readOnly: true
      name:
        type: "string"
      description:
        type: "string"
      steps:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            description:
              type: "string"
            parentId:
              type: "integer"
              format: "int64"
            stepType:
              type: "string"
              enum:
                - query
                - transform
                - load
            stepConfig:
              type: "object"
      params:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            value:
              type: "string"
  Interface:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
      poolId:
        type: "integer"
        format: "int64"
        readOnly: true
      createdAt:
        type: "string"
        format: "date-time"
        readOnly: true
      name:
        type: "string"
      type:
        type: "string"
        enum:
          - s3
          - http
          - sftp
          - jdbc
      endpoint:
        type: "string"
